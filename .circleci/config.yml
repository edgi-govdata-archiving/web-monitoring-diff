version: 2.1
jobs:
  build:
    working_directory: ~/web-monitoring-diff
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - run:
          name: Install System Dependencies
          command: |
            apt-get install \
              libxml2-dev libxslt-dev libssl-dev openssl libcurl4-openssl-dev

      - restore_cache:
          keys:
            - cache-v2-{{ arch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-server.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "requirements-experimental.txt" }}
            - cache-v2-{{ arch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-server.txt" }}-{{ checksum "requirements-dev.txt" }}-
            - cache-v2-{{ arch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-server.txt" }}-
            - cache-v2-{{ arch }}-{{ checksum "requirements.txt" }}-
            - cache-v2-{{ arch }}-

      # Bundle install dependencies
      - run:
          name: Install Dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -e .[server,dev] --no-binary lxml
            pip install -r requirements-experimental.txt

      # Store bundle cache
      - save_cache:
          key: cache-v2-{{ arch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-server.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "requirements-experimental.txt" }}
          paths:
            - venv

      - run:
          name: Tests
          command: |
            . venv/bin/activate
            coverage run -m pytest -vv
      - run:
          name: Coverage
          command: |
            . venv/bin/activate
            coverage report -m
      - run:
          name: Code linting
          command: |
            . venv/bin/activate
            flake8 .
    #   - run:
    #       name: Build docs
    #       command: |
    #         . venv/bin/activate
    #         cd docs && make html

  build_docker:
    machine: true
    steps:
      - checkout
      - run: |
          docker build -t envirodgi/web-monitoring-diff:${CIRCLE_SHA1} .
      - run:
          name: Save Image
          command: |
            mkdir /tmp/workspace
            docker save --output /tmp/workspace/docker-image envirodgi/web-monitoring-diff:${CIRCLE_SHA1}
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - docker-image

  publish_docker:
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Built Docker Image
          command: docker load --input /tmp/workspace/docker-image
      - run:
          name: Docker Login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      # TODO: Drop these SHA-tagged builds in favor of just release numbers.
      # We maintain them for now for compatibility w/ a previous release style.
      - run:
          name: Publish Commit-SHA-Tagged Image
          command: docker push envirodgi/web-monitoring-diff:${CIRCLE_SHA1}
      - run:
          name: Publish Version-Tagged Image
          command: |
            # Sanity-check that we are dealing with an actual release tag.
            if [ -z "${CIRCLE_TAG}" ]; then
              echo 'There is no git tag to use!'
            else
              # Re-tag the Docker image with the current version number, which
              # is based on the current git tag ($CIRCLE_TAG).
              docker image tag \
                envirodgi/web-monitoring-diff:${CIRCLE_SHA1} \
                envirodgi/web-monitoring-diff:${CIRCLE_TAG:1}
              docker push envirodgi/web-monitoring-diff:${CIRCLE_TAG:1}
            fi
      - run:
          name: Publish :latest Tag If Final Release
          command: |
            # Skip tags with additional info after "v0.0.0", e.g. "v1.0.0a1"
            # NOTE: the version of grep on Circle needs -P (perl-style regex)
            # instead of -E (extended regex) to support `\d`.
            FINAL_VERSION="$(
              echo "${CIRCLE_TAG}" |
              grep -P '^v\d+(\.\d+)+$' ||
              true
            )"
            if [ -z "${FINAL_VERSION}" ]; then
              echo 'The current tag does not represent a final release!'
              echo 'Not publishing a ":latest" tag.'
            else
              docker image tag \
                envirodgi/web-monitoring-diff:${CIRCLE_SHA1} \
                envirodgi/web-monitoring-diff:latest
              docker push envirodgi/web-monitoring-diff:latest
            fi

  # TODO: Publish to PyPI from CircleCI for version tags, similar to Docker.
  # publish_pypi:

workflows:
  build:
    jobs:
      # NOTE: because publishing runs on tags, we have to make sure all jobs
      # it depends on also run on tags (by default, jobs do not run on tags,
      # only branches).
      #
      # Also: {filters: {tags: {only: ...}}} may look deceiving, like it's only
      # running for the tags. But what's actually happening here is that
      # branches aren't being filtered (only tags are), so it's running for
      # *all* branches and also for tags that start with "v".
      #
      # See more in:
      # https://circleci.com/docs/2.0/workflows/#executing-workflows-for-a-git-tag
      - build:
          filters:
            tags:
              only: /^v.*/
      - build_docker:
          filters:
            tags:
              only: /^v.*/
      # Publishing only happens for tags starting with "v", and no branches.
      - publish_docker:
          requires:
            - build
            - build_docker
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
